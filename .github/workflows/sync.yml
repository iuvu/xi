name: File Transformation and Copy

on:
  workflow_dispatch:
    inputs:
      target_files:
        description: '要处理的文件路径（多个文件用逗号分隔）'
        required: true
        default: 'Rules/list/Game/Sky.list,Rules/list/Game/SkyCN.list,Rules/list/Emby.list,Rules/list/live_television.list'
      search_chars:
        description: '要查找的字符（多个字符用逗号分隔，支持多组替换用分号分隔）'
        required: true
        default: 'DOMAIN,,DOMAIN-SUFFIX,,DOMAIN-KEYWORD,,IP-CIDR,,IP-CIDR6,'
      replace_chars:
        description: '替换的字符（与查找字符一一对应，多组替换用分号分隔）'
        required: true
        default: ' - DOMAIN,, - DOMAIN-SUFFIX,, - DOMAIN-KEYWORD,, - IP-CIDR,, - IP-CIDR6,'
      copy_destinations:
        description: '复制目标路径（多个路径用逗号分隔）'
        required: true
        default: 'Rules/yaml/Game/Sky.yaml,Rules/yaml/Game/SkyCN.yaml,Rules/yaml/Emby.yaml,Rules/yaml/live_television.yaml'
        
  # 自动触发：当指定目录下的文件被修改时
  push:
    paths:
      - 'Rules/list/**'

jobs:
  transform-and-copy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set parameters based on trigger type
      run: |
        # 如果是手动触发，使用输入参数
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "手动触发模式"
          echo "MANUAL_TARGET_FILES=${{ github.event.inputs.target_files }}" >> $GITHUB_ENV
          echo "MANUAL_SEARCH_CHARS=${{ github.event.inputs.search_chars }}" >> $GITHUB_ENV
          echo "MANUAL_REPLACE_CHARS=${{ github.event.inputs.replace_chars }}" >> $GITHUB_ENV
          echo "MANUAL_COPY_DESTINATIONS=${{ github.event.inputs.copy_destinations }}" >> $GITHUB_ENV
        else
          # 如果是自动触发，使用固定参数
          echo "自动触发模式"
          echo "AUTO_MODE=true" >> $GITHUB_ENV
        fi
        
        echo "触发类型: ${{ github.event_name }}"
    
    - name: Process manual inputs
      if: github.event_name == 'workflow_dispatch'
      run: |
        # 处理手动输入的参数
        echo "TARGET_FILES=(${MANUAL_TARGET_FILES//,/ })" >> $GITHUB_ENV
        echo "SEARCH_CHARS=(${MANUAL_SEARCH_CHARS//,/ })" >> $GITHUB_ENV
        echo "REPLACE_CHARS=(${MANUAL_REPLACE_CHARS//,/ })" >> $GITHUB_ENV
        echo "COPY_DESTINATIONS=(${MANUAL_COPY_DESTINATIONS//,/ })" >> $GITHUB_ENV
        
        echo "目标文件: ${MANUAL_TARGET_FILES//,/ }"
    
    - name: Process auto inputs
      if: github.event_name != 'workflow_dispatch'
      run: |
        # 设置自动触发的固定参数
        echo "TARGET_FILES=(Rules/list/Game/Sky.list Rules/list/Game/SkyCN.list Rules/list/Emby.list Rules/list/live_television.list)" >> $GITHUB_ENV
        echo "SEARCH_CHARS=(DOMAIN DOMAIN-SUFFIX DOMAIN-KEYWORD IP-CIDR IP-CIDR6)" >> $GITHUB_ENV
        echo "REPLACE_CHARS=(- DOMAIN - DOMAIN-SUFFIX - DOMAIN-KEYWORD - IP-CIDR - IP-CIDR6)" >> $GITHUB_ENV
        echo "COPY_DESTINATIONS=(Rules/yaml/Game/Sky.yaml Rules/yaml/Game/SkyCN.yaml Rules/yaml/Emby.yaml Rules/yaml/live_television.yaml)" >> $GITHUB_ENV
        
        echo "目标文件: Rules/list/Game/Sky.list Rules/list/Game/SkyCN.list Rules/list/Emby.list Rules/list/live_television.list"
    
    - name: Validate input lengths
      run: |
        echo "开始输入验证..."
        echo "目标文件: ${TARGET_FILES[@]}"
        echo "查找字符: ${SEARCH_CHARS[@]}"
        echo "替换字符: ${REPLACE_CHARS[@]}"
        echo "复制路径: ${COPY_DESTINATIONS[@]}"
        
        # 检查查找字符和替换字符数量是否匹配
        if [ ${#SEARCH_CHARS[@]} -ne ${#REPLACE_CHARS[@]} ]; then
          echo "错误：查找字符数量(${#SEARCH_CHARS[@]})与替换字符数量(${#REPLACE_CHARS[@]})不匹配"
          exit 1
        fi
        
        # 检查目标文件和复制路径数量是否匹配
        if [ ${#TARGET_FILES[@]} -ne ${#COPY_DESTINATIONS[@]} ]; then
          echo "错误：目标文件数量(${#TARGET_FILES[@]})与复制路径数量(${#COPY_DESTINATIONS[@]})不匹配"
          exit 1
        fi
        echo "输入验证通过"
    
    - name: Transform and copy files
      run: |
        # 遍历所有目标文件
        for i in "${!TARGET_FILES[@]}"; do
          SOURCE_FILE="${TARGET_FILES[$i]}"
          DEST_FILE="${COPY_DESTINATIONS[$i]}"
          
          echo "正在处理文件: $SOURCE_FILE -> $DEST_FILE"
          
          # 检查源文件是否存在
          if [ ! -f "$SOURCE_FILE" ]; then
            echo "警告：源文件 $SOURCE_FILE 不存在，跳过"
            continue
          fi
          
          # 创建目标目录（如果不存在）
          mkdir -p "$(dirname "$DEST_FILE")"
          
          # 读取源文件内容
          CONTENT=$(cat "$SOURCE_FILE")
          ORIGINAL_CONTENT="$CONTENT"
          
          echo "=== 字符替换详情 ==="
          
          # 执行一对一字符替换
          for j in "${!SEARCH_CHARS[@]}"; do
            SEARCH="${SEARCH_CHARS[$j]}"
            REPLACE="${REPLACE_CHARS[$j]}"
            
            # 记录替换前的状态
            OLD_CONTENT="$CONTENT"
            CONTENT="${CONTENT//$SEARCH/$REPLACE}"
            
            # 统计替换次数
            OLD_COUNT=$(echo "$OLD_CONTENT" | grep -o "$SEARCH" | wc -l || true)
            NEW_COUNT=$(echo "$CONTENT" | grep -o "$SEARCH" | wc -l || true)
            REPLACED_COUNT=$((OLD_COUNT - NEW_COUNT))
            
            echo "替换 '$SEARCH' -> '$REPLACE': 替换了 $REPLACED_COUNT 次"
            
            # 修改位置标记 - 字符替换
            echo "修改位置: 字符级别替换 - 文件 '$SOURCE_FILE' 中的字符 '$SEARCH' 替换为 '$REPLACE'"
          done
          
          # 检查内容是否有变化
          if [ "$ORIGINAL_CONTENT" == "$CONTENT" ]; then
            echo "文件内容未发生变化"
          else
            echo "文件内容已更新"
          fi
          
          # 将转换后的内容写入目标文件
          echo "$CONTENT" > "$DEST_FILE"
          echo "文件已复制到: $DEST_FILE"
          
          # 复制文件路径标记
          echo "复制文件路径: $SOURCE_FILE -> $DEST_FILE"
        done
    
    - name: Display file differences
      run: |
        echo "=== 文件变更摘要 ==="
        for i in "${!TARGET_FILES[@]}"; do
          SOURCE_FILE="${TARGET_FILES[$i]}"
          DEST_FILE="${COPY_DESTINATIONS[$i]}"
          
          if [ -f "$SOURCE_FILE" ] && [ -f "$DEST_FILE" ]; then
            echo "比较 $SOURCE_FILE 和 $DEST_FILE:"
            diff -u "$SOURCE_FILE" "$DEST_FILE" || true
            echo "----------------------------------------"
          fi
        done
    
    - name: Commit and push changes
      run: |
        # 配置Git用户信息
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 添加所有更改的文件
        git add .
        
        # 检查是否有更改需要提交
        if git diff --staged --quiet; then
          echo "没有检测到文件更改"
        else
          # 根据触发类型生成不同的提交信息
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            COMMIT_MSG="Manual: Transform files via GitHub Actions - ${{ github.event.inputs.target_files }}"
          else
            COMMIT_MSG="Auto: Transform files via GitHub Actions - ${TARGET_FILES[*]}"
          fi
          
          # 提交更改
          git commit -m "$COMMIT_MSG"
          
          # 推送更改
          git push
          echo "更改已提交并推送到仓库"
        fi

    - name: Summary
      run: |
        echo "=== 操作完成摘要 ==="
        echo "触发类型: ${{ github.event_name }}"
        echo "处理的文件对:"
        for i in "${!TARGET_FILES[@]}"; do
          echo "  ${TARGET_FILES[$i]} -> ${COPY_DESTINATIONS[$i]}"
        done
        echo ""
        echo "执行的字符替换:"
        for j in "${!SEARCH_CHARS[@]}"; do
          echo "  '${SEARCH_CHARS[$j]}' -> '${REPLACE_CHARS[$j]}'"
        done
