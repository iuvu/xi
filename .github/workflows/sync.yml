name: File Transformation and Copy

on:
  workflow_dispatch:
    inputs:
      target_files:
        description: 'Source file paths (comma separated)'
        required: true
        default: 'Rules/list/Game/Sky.list,Rules/list/Game/SkyCN.list,Rules/list/Emby.list,Rules/list/live_television.list'
      search_chars:
        description: 'Characters to search for (comma separated)'
        required: true
        default: 'DOMAIN,,DOMAIN-SUFFIX,,DOMAIN-KEYWORD,,IP-CIDR,,IP-CIDR6,'
      replace_chars:
        description: 'Characters to replace with (comma separated)'
        required: true
        default: ' - DOMAIN,, - DOMAIN-SUFFIX,, - DOMAIN-KEYWORD,, - IP-CIDR,, - IP-CIDR6,'
      copy_destinations:
        description: 'Destination file paths (comma separated)'
        required: true
        default: 'Rules/yaml/Game/Sky.yaml,Rules/yaml/Game/SkyCN.yaml,Rules/yaml/Emby.yaml,Rules/yaml/live_television.yaml'

  push:
    paths:
      - 'Rules/list/**'

jobs:
  sync-rules:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup manual parameters
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "TARGET_FILES=${{ github.event.inputs.target_files }}" >> $GITHUB_ENV
        echo "SEARCH_CHARS=${{ github.event.inputs.search_chars }}" >> $GITHUB_ENV
        echo "REPLACE_CHARS=${{ github.event.inputs.replace_chars }}" >> $GITHUB_ENV
        echo "COPY_DESTINATIONS=${{ github.event.inputs.copy_destinations }}" >> $GITHUB_ENV

    - name: Setup auto parameters
      if: github.event_name != 'workflow_dispatch'
      run: |
        echo "TARGET_FILES=Rules/list/Game/Sky.list,Rules/list/Game/SkyCN.list,Rules/list/Emby.list,Rules/list/live_television.list" >> $GITHUB_ENV
        echo "SEARCH_CHARS=DOMAIN,,DOMAIN-SUFFIX,,DOMAIN-KEYWORD,,IP-CIDR,,IP-CIDR6," >> $GITHUB_ENV
        echo "REPLACE_CHARS= - DOMAIN,, - DOMAIN-SUFFIX,, - DOMAIN-KEYWORD,, - IP-CIDR,, - IP-CIDR6," >> $GITHUB_ENV
        echo "COPY_DESTINATIONS=Rules/yaml/Game/Sky.yaml,Rules/yaml/Game/SkyCN.yaml,Rules/yaml/Emby.yaml,Rules/yaml/live_television.yaml" >> $GITHUB_ENV

    - name: Debug information
      run: |
        echo "=== DEBUG INFO ==="
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "TARGET_FILES: $TARGET_FILES"
        echo "SEARCH_CHARS: $SEARCH_CHARS"
        echo "REPLACE_CHARS: $REPLACE_CHARS"
        echo "COPY_DESTINATIONS: $COPY_DESTINATIONS"
        echo "Current directory: $(pwd)"
        echo "Listing Rules directory:"
        find Rules -type f -name "*.list" | head -10 || echo "No list files found"
        echo "=== END DEBUG ==="

    - name: Validate environment
      run: |
        echo "=== VALIDATION ==="
        if [ -z "$TARGET_FILES" ]; then
          echo "‚ùå TARGET_FILES is empty"
          exit 1
        fi
        if [ -z "$SEARCH_CHARS" ]; then
          echo "‚ùå SEARCH_CHARS is empty"
          exit 1
        fi
        if [ -z "$REPLACE_CHARS" ]; then
          echo "‚ùå REPLACE_CHARS is empty"
          exit 1
        fi
        if [ -z "$COPY_DESTINATIONS" ]; then
          echo "‚ùå COPY_DESTINATIONS is empty"
          exit 1
        fi
        echo "‚úÖ All environment variables are set"

    - name: Process files
      run: |
        echo "=== PROCESSING FILES ==="
        
        # Convert to arrays
        IFS=',' read -ra TARGET_ARRAY <<< "$TARGET_FILES"
        IFS=',' read -ra SEARCH_ARRAY <<< "$SEARCH_CHARS"
        IFS=',' read -ra REPLACE_ARRAY <<< "$REPLACE_CHARS"
        IFS=',' read -ra DEST_ARRAY <<< "$COPY_DESTINATIONS"
        
        # Validate array lengths
        if [ ${#SEARCH_ARRAY[@]} -ne ${#REPLACE_ARRAY[@]} ]; then
          echo "‚ùå Search and replace count mismatch: ${#SEARCH_ARRAY[@]} vs ${#REPLACE_ARRAY[@]}"
          exit 1
        fi
        
        if [ ${#TARGET_ARRAY[@]} -ne ${#DEST_ARRAY[@]} ]; then
          echo "‚ùå Target and destination count mismatch: ${#TARGET_ARRAY[@]} vs ${#DEST_ARRAY[@]}"
          exit 1
        fi
        
        echo "‚úÖ Validation passed"
        
        # Process files
        PROCESSED_COUNT=0
        for i in "${!TARGET_ARRAY[@]}"; do
          SOURCE_FILE="${TARGET_ARRAY[i]}"
          DEST_FILE="${DEST_ARRAY[i]}"
          
          echo "--- Processing: $SOURCE_FILE -> $DEST_FILE ---"
          
          # Check source file exists
          if [ ! -f "$SOURCE_FILE" ]; then
            echo "‚ö†Ô∏è Source file not found: $SOURCE_FILE"
            continue
          fi
          
          # Create destination directory
          mkdir -p "$(dirname "$DEST_FILE")"
          
          # Read source content
          CONTENT=$(cat "$SOURCE_FILE")
          echo "üìÑ Source file size: ${#CONTENT} chars"
          
          # Apply replacements
          for j in "${!SEARCH_ARRAY[@]}"; do
            SEARCH="${SEARCH_ARRAY[j]}"
            REPLACE="${REPLACE_ARRAY[j]}"
            
            OLD_COUNT=$(grep -o "$SEARCH" <<< "$CONTENT" | wc -l || echo "0")
            CONTENT="${CONTENT//$SEARCH/$REPLACE}"
            NEW_COUNT=$(grep -o "$SEARCH" <<< "$CONTENT" | wc -l || echo "0")
            CHANGES=$((OLD_COUNT - NEW_COUNT))
            
            echo "  üîÑ '$SEARCH' -> '$REPLACE': $CHANGES replacements"
          done
          
          # Write to destination
          echo "$CONTENT" > "$DEST_FILE"
          echo "‚úÖ Created: $DEST_FILE"
          ((PROCESSED_COUNT++))
        done
        
        echo "=== PROCESSED $PROCESSED_COUNT FILES ==="

    - name: Commit changes
      run: |
        echo "=== COMMITTING CHANGES ==="
        
        # Configure git
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        
        # Check for changes
        if git diff --quiet; then
          echo "‚úÖ No changes to commit"
          exit 0
        fi
        
        # Add and commit
        git add .
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          COMMIT_MSG="üîß Manual sync: ${{ github.event.inputs.target_files }}"
        else
          COMMIT_MSG="ü§ñ Auto sync: Rules update"
        fi
        
        git commit -m "$COMMIT_MSG"
        git push
        echo "‚úÖ Changes committed and pushed"

    - name: Success summary
      run: |
        echo "=== ‚úÖ WORKFLOW SUCCESS ==="
        echo "üéâ Workflow completed successfully!"
        echo "‚è∞ Time: $(date)"
        echo "üöÄ Trigger: ${{ github.event_name }}"
        echo "üìÅ Branch: ${{ github.ref }}"
