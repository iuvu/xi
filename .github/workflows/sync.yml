name: File Transformation and Copy

on:
  workflow_dispatch:
    inputs:
      target_files:
        description: '要处理的文件路径（多个文件用逗号分隔）'
        required: true
        default: 'Rules/list/Game/Sky.list,Rules/list/Game/SkyCN.list,Rules/list/Emby.list,Rules/list/live_television.list'
      search_chars:
        description: '要查找的字符（多个字符用逗号分隔，支持多组替换用分号分隔）'
        required: true
        default: 'DOMAIN,,DOMAIN-SUFFIX,,DOMAIN-KEYWORD,,IP-CIDR,,IP-CIDR6,'
      replace_chars:
        description: '替换的字符（与查找字符一一对应，多组替换用分号分隔）'
        required: true
        default: ' - DOMAIN,, - DOMAIN-SUFFIX,, - DOMAIN-KEYWORD,, - IP-CIDR,, - IP-CIDR6,'
      copy_destinations:
        description: '复制目标路径（多个路径用逗号分隔）'
        required: true
        default: 'Rules/yaml/Game/Sky.yaml,Rules/yaml/Game/SkyCN.yaml,Rules/yaml/Emby.yaml,Rules/yaml/live_television.yaml'
        
  # 自动触发：当指定目录下的文件被修改时
  push:
    paths:
      - 'Rules/list/**'

jobs:
  sync-rules:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.TOKEN }}
        
    - name: Setup manual parameters
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "TARGET_FILES=${{ github.event.inputs.target_files }}" >> $GITHUB_ENV
        echo "SEARCH_CHARS=${{ github.event.inputs.search_chars }}" >> $GITHUB_ENV
        echo "REPLACE_CHARS=${{ github.event.inputs.replace_chars }}" >> $GITHUB_ENV
        echo "COPY_DESTINATIONS=${{ github.event.inputs.copy_destinations }}" >> $GITHUB_ENV
        
    - name: Setup auto parameters
      if: github.event_name != 'workflow_dispatch'
      run: |
        echo "TARGET_FILES=Rules/list/Game/Sky.list,Rules/list/Game/SkyCN.list,Rules/list/Emby.list,Rules/list/live_television.list" >> $GITHUB_ENV
        echo "SEARCH_CHARS=DOMAIN,DOMAIN-SUFFIX,DOMAIN-KEYWORD,IP-CIDR,IP-CIDR6" >> $GITHUB_ENV
        echo "REPLACE_CHARS=- DOMAIN,- DOMAIN-SUFFIX,- DOMAIN-KEYWORD,- IP-CIDR,- IP-CIDR6" >> $GITHUB_ENV
        echo "COPY_DESTINATIONS=Rules/yaml/Game/Sky.yaml,Rules/yaml/Game/SkyCN.yaml,Rules/yaml/Emby.yaml,Rules/yaml/live_television.yaml" >> $GITHUB_ENV
        
    - name: Process files
      run: |
        # Convert comma-separated strings to arrays
        IFS=',' read -ra TARGET_FILES_ARRAY <<< "$TARGET_FILES"
        IFS=',' read -ra SEARCH_CHARS_ARRAY <<< "$SEARCH_CHARS"
        IFS=',' read -ra REPLACE_CHARS_ARRAY <<< "$REPLACE_CHARS"
        IFS=',' read -ra COPY_DESTINATIONS_ARRAY <<< "$COPY_DESTINATIONS"
        
        echo "Target files: ${TARGET_FILES_ARRAY[@]}"
        echo "Search chars: ${SEARCH_CHARS_ARRAY[@]}"
        echo "Replace chars: ${REPLACE_CHARS_ARRAY[@]}"
        echo "Copy destinations: ${COPY_DESTINATIONS_ARRAY[@]}"
        
        # Validate input lengths
        if [ ${#SEARCH_CHARS_ARRAY[@]} -ne ${#REPLACE_CHARS_ARRAY[@]} ]; then
          echo "Error: Search characters count (${#SEARCH_CHARS_ARRAY[@]}) does not match replace characters count (${#REPLACE_CHARS_ARRAY[@]})"
          exit 1
        fi
        
        if [ ${#TARGET_FILES_ARRAY[@]} -ne ${#COPY_DESTINATIONS_ARRAY[@]} ]; then
          echo "Error: Target files count (${#TARGET_FILES_ARRAY[@]}) does not match copy destinations count (${#COPY_DESTINATIONS_ARRAY[@]})"
          exit 1
        fi
        
        # Process each file
        for i in "${!TARGET_FILES_ARRAY[@]}"; do
          SOURCE_FILE="${TARGET_FILES_ARRAY[$i]}"
          DEST_FILE="${COPY_DESTINATIONS_ARRAY[$i]}"
          
          echo "Processing: $SOURCE_FILE -> $DEST_FILE"
          
          # Check if source file exists
          if [ ! -f "$SOURCE_FILE" ]; then
            echo "Warning: Source file $SOURCE_FILE does not exist, skipping"
            continue
          fi
          
          # Create destination directory
          mkdir -p "$(dirname "$DEST_FILE")"
          
          # Read source file content
          CONTENT=$(cat "$SOURCE_FILE")
          ORIGINAL_CONTENT="$CONTENT"
          
          echo "=== Character Replacement Details ==="
          
          # Perform character replacements
          for j in "${!SEARCH_CHARS_ARRAY[@]}"; do
            SEARCH="${SEARCH_CHARS_ARRAY[$j]}"
            REPLACE="${REPLACE_CHARS_ARRAY[$j]}"
            
            OLD_CONTENT="$CONTENT"
            CONTENT="${CONTENT//$SEARCH/$REPLACE}"
            
            OLD_COUNT=$(echo "$OLD_CONTENT" | grep -o "$SEARCH" | wc -l || true)
            NEW_COUNT=$(echo "$CONTENT" | grep -o "$SEARCH" | wc -l || true)
            REPLACED_COUNT=$((OLD_COUNT - NEW_COUNT))
            
            echo "Replaced '$SEARCH' with '$REPLACE': $REPLACED_COUNT times"
            echo "Modification location: Character replacement in '$SOURCE_FILE' - '$SEARCH' to '$REPLACE'"
          done
          
          # Write transformed content to destination file
          echo "$CONTENT" > "$DEST_FILE"
          echo "File copied to: $DEST_FILE"
          echo "Copy file path: $SOURCE_FILE -> $DEST_FILE"
        done
        
    - name: Display differences
      run: |
        IFS=',' read -ra TARGET_FILES_ARRAY <<< "$TARGET_FILES"
        IFS=',' read -ra COPY_DESTINATIONS_ARRAY <<< "$COPY_DESTINATIONS"
        
        echo "=== File Changes Summary ==="
        for i in "${!TARGET_FILES_ARRAY[@]}"; do
          SOURCE_FILE="${TARGET_FILES_ARRAY[$i]}"
          DEST_FILE="${COPY_DESTINATIONS_ARRAY[$i]}"
          
          if [ -f "$SOURCE_FILE" ] && [ -f "$DEST_FILE" ]; then
            echo "Comparing $SOURCE_FILE and $DEST_FILE:"
            diff -u "$SOURCE_FILE" "$DEST_FILE" || true
            echo "----------------------------------------"
          fi
        done
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add .
        
        if git diff --staged --quiet; then
          echo "No changes detected"
        else
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            COMMIT_MSG="Manual: Sync rules - ${{ github.event.inputs.target_files }}"
          else
            COMMIT_MSG="Auto: Sync rules - $TARGET_FILES"
          fi
          
          git commit -m "$COMMIT_MSG"
          git push
          echo "Changes committed and pushed"
        fi
        
    - name: Summary
      run: |
        IFS=',' read -ra TARGET_FILES_ARRAY <<< "$TARGET_FILES"
        IFS=',' read -ra SEARCH_CHARS_ARRAY <<< "$SEARCH_CHARS"
        IFS=',' read -ra REPLACE_CHARS_ARRAY <<< "$REPLACE_CHARS"
        IFS=',' read -ra COPY_DESTINATIONS_ARRAY <<< "$COPY_DESTINATIONS"
        
        echo "=== Operation Summary ==="
        echo "Trigger type: ${{ github.event_name }}"
        echo "File pairs processed:"
        for i in "${!TARGET_FILES_ARRAY[@]}"; do
          echo "  ${TARGET_FILES_ARRAY[$i]} -> ${COPY_DESTINATIONS_ARRAY[$i]}"
        done
        echo ""
        echo "Character replacements:"
        for j in "${!SEARCH_CHARS_ARRAY[@]}"; do
          echo "  '${SEARCH_CHARS_ARRAY[$j]}' -> '${REPLACE_CHARS_ARRAY[$j]}'"
        done
