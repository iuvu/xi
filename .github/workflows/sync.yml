name: File Transformation and Copy

on:
  workflow_dispatch:
    inputs:
      target_files:
        description: 'Ë¶ÅÂ§ÑÁêÜÁöÑÊñá‰ª∂Ë∑ØÂæÑÔºàÂ§ö‰∏™Êñá‰ª∂Áî®ÈÄóÂè∑ÂàÜÈöîÔºâ'
        required: true
        default: 'Rules/list/Game/Sky.list,Rules/list/Game/SkyCN.list,Rules/list/Emby.list,Rules/list/live_television.list'
      search_chars:
        description: 'Ë¶ÅÊü•ÊâæÁöÑÂ≠óÁ¨¶ÔºàÂ§ö‰∏™Â≠óÁ¨¶Áî®ÈÄóÂè∑ÂàÜÈöîÔºåÊîØÊåÅÂ§öÁªÑÊõøÊç¢Áî®ÂàÜÂè∑ÂàÜÈöîÔºâ'
        required: true
        default: 'DOMAIN,,DOMAIN-SUFFIX,,DOMAIN-KEYWORD,,IP-CIDR,,IP-CIDR6,'
      replace_chars:
        description: 'ÊõøÊç¢ÁöÑÂ≠óÁ¨¶Ôºà‰∏éÊü•ÊâæÂ≠óÁ¨¶‰∏Ä‰∏ÄÂØπÂ∫îÔºåÂ§öÁªÑÊõøÊç¢Áî®ÂàÜÂè∑ÂàÜÈöîÔºâ'
        required: true
        default: ' - DOMAIN,, - DOMAIN-SUFFIX,, - DOMAIN-KEYWORD,, - IP-CIDR,, - IP-CIDR6,'
      copy_destinations:
        description: 'Â§çÂà∂ÁõÆÊ†áË∑ØÂæÑÔºàÂ§ö‰∏™Ë∑ØÂæÑÁî®ÈÄóÂè∑ÂàÜÈöîÔºâ'
        required: true
        default: 'Rules/yaml/Game/Sky.yaml,Rules/yaml/Game/SkyCN.yaml,Rules/yaml/Emby.yaml,Rules/yaml/live_television.yaml'
        
  # Ëá™Âä®Ëß¶ÂèëÔºöÂΩìÊåáÂÆöÁõÆÂΩï‰∏ãÁöÑÊñá‰ª∂Ë¢´‰øÆÊîπÊó∂
  push:
    paths:
      - 'Rules/list/**'

jobs:
  sync-rules:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: release  # ÊòéÁ°ÆÊåáÂÆöÂàÜÊîØ

    - name: Setup parameters for manual trigger
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "TARGET_FILES=${{ github.event.inputs.target_files }}" >> $GITHUB_ENV
        echo "SEARCH_CHARS=${{ github.event.inputs.search_chars }}" >> $GITHUB_ENV
        echo "REPLACE_CHARS=${{ github.event.inputs.replace_chars }}" >> $GITHUB_ENV
        echo "COPY_DESTINATIONS=${{ github.event.inputs.copy_destinations }}" >> $GITHUB_ENV

    - name: Setup parameters for auto trigger
      if: github.event_name != 'workflow_dispatch'
      run: |
        echo "TARGET_FILES=Rules/list/Game/Sky.list,Rules/list/Game/SkyCN.list,Rules/list/Emby.list,Rules/list/live_television.list" >> $GITHUB_ENV
        echo "SEARCH_CHARS=DOMAIN,DOMAIN-SUFFIX,DOMAIN-KEYWORD,IP-CIDR,IP-CIDR6" >> $GITHUB_ENV
        echo "REPLACE_CHARS=- DOMAIN,- DOMAIN-SUFFIX,- DOMAIN-KEYWORD,- IP-CIDR,- IP-CIDR6" >> $GITHUB_ENV
        echo "COPY_DESTINATIONS=Rules/yaml/Game/Sky.yaml,Rules/yaml/Game/SkyCN.yaml,Rules/yaml/Emby.yaml,Rules/yaml/live_television.yaml" >> $GITHUB_ENV

    - name: Show debug information
      run: |
        echo "=== Debug Information ==="
        echo "Event: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref }}"
        echo "Target Files: $TARGET_FILES"
        echo "Search Chars: $SEARCH_CHARS"
        echo "Replace Chars: $REPLACE_CHARS"
        echo "Copy Destinations: $COPY_DESTINATIONS"
        echo "Current directory: $(pwd)"
        echo "Files in Rules/list:"
        ls -la Rules/list/ || echo "Rules/list directory not found"
        echo "=== End Debug ==="

    - name: Validate inputs
      run: |
        echo "=== Validating Inputs ==="
        # Check if required environment variables are set
        if [ -z "$TARGET_FILES" ]; then
          echo "‚ùå ERROR: TARGET_FILES is not set"
          exit 1
        fi
        if [ -z "$SEARCH_CHARS" ]; then
          echo "‚ùå ERROR: SEARCH_CHARS is not set"
          exit 1
        fi
        if [ -z "$REPLACE_CHARS" ]; then
          echo "‚ùå ERROR: REPLACE_CHARS is not set"
          exit 1
        fi
        if [ -z "$COPY_DESTINATIONS" ]; then
          echo "‚ùå ERROR: COPY_DESTINATIONS is not set"
          exit 1
        fi
        echo "‚úÖ All environment variables are set"

    - name: Process file transformations
      run: |
        echo "=== Starting File Processing ==="
        
        # Convert comma-separated strings to arrays
        IFS=',' read -ra TARGET_ARRAY <<< "$TARGET_FILES"
        IFS=',' read -ra SEARCH_ARRAY <<< "$SEARCH_CHARS"
        IFS=',' read -ra REPLACE_ARRAY <<< "$REPLACE_CHARS"
        IFS=',' read -ra DEST_ARRAY <<< "$COPY_DESTINATIONS"
        
        echo "Target files count: ${#TARGET_ARRAY[@]}"
        echo "Search chars count: ${#SEARCH_ARRAY[@]}"
        echo "Replace chars count: ${#REPLACE_ARRAY[@]}"
        echo "Destination files count: ${#DEST_ARRAY[@]}"
        
        # Validate array lengths
        if [ ${#SEARCH_ARRAY[@]} -ne ${#REPLACE_ARRAY[@]} ]; then
          echo "‚ùå ERROR: Search characters count (${#SEARCH_ARRAY[@]}) does not match replace characters count (${#REPLACE_ARRAY[@]})"
          exit 1
        fi
        
        if [ ${#TARGET_ARRAY[@]} -ne ${#DEST_ARRAY[@]} ]; then
          echo "‚ùå ERROR: Target files count (${#TARGET_ARRAY[@]}) does not match destination files count (${#DEST_ARRAY[@]})"
          exit 1
        fi
        
        echo "‚úÖ Input validation passed"
        
        # Process each file
        for i in "${!TARGET_ARRAY[@]}"; do
          SOURCE_FILE="${TARGET_ARRAY[i]}"
          DEST_FILE="${DEST_ARRAY[i]}"
          
          echo "--- Processing: $SOURCE_FILE -> $DEST_FILE ---"
          
          # Check if source file exists
          if [ ! -f "$SOURCE_FILE" ]; then
            echo "‚ö†Ô∏è WARNING: Source file '$SOURCE_FILE' does not exist, skipping"
            continue
          fi
          
          # Create destination directory if it doesn't exist
          DEST_DIR=$(dirname "$DEST_FILE")
          mkdir -p "$DEST_DIR"
          echo "Created directory: $DEST_DIR"
          
          # Read source file content
          CONTENT=$(cat "$SOURCE_FILE")
          ORIGINAL_CONTENT="$CONTENT"
          
          echo "Original file size: ${#CONTENT} characters"
          echo "Performing character replacements..."
          
          # Perform character replacements
          for j in "${!SEARCH_ARRAY[@]}"; do
            SEARCH="${SEARCH_ARRAY[j]}"
            REPLACE="${REPLACE_ARRAY[j]}"
            
            # Count occurrences before replacement
            OLD_COUNT=$(grep -o "$SEARCH" <<< "$CONTENT" | wc -l || true)
            
            # Perform replacement
            CONTENT="${CONTENT//$SEARCH/$REPLACE}"
            
            # Count occurrences after replacement
            NEW_COUNT=$(grep -o "$SEARCH" <<< "$CONTENT" | wc -l || true)
            REPLACED_COUNT=$((OLD_COUNT - NEW_COUNT))
            
            echo "  Replaced '$SEARCH' -> '$REPLACE': $REPLACED_COUNT times"
          done
          
          # Write transformed content to destination file
          echo "$CONTENT" > "$DEST_FILE"
          echo "‚úÖ Successfully created: $DEST_FILE"
          
          # Show file sizes for comparison
          ORIGINAL_SIZE=$(stat -f%z "$SOURCE_FILE" 2>/dev/null || stat -c%s "$SOURCE_FILE" 2>/dev/null || echo "unknown")
          NEW_SIZE=$(stat -f%z "$DEST_FILE" 2>/dev/null || stat -c%s "$DEST_FILE" 2>/dev/null || echo "unknown")
          echo "File sizes - Original: $ORIGINAL_SIZE bytes, New: $NEW_SIZE bytes"
        done
        
        echo "=== File processing completed ==="

    - name: Show file differences
      run: |
        echo "=== File Differences ==="
        IFS=',' read -ra TARGET_ARRAY <<< "$TARGET_FILES"
        IFS=',' read -ra DEST_ARRAY <<< "$COPY_DESTINATIONS"
        
        for i in "${!TARGET_ARRAY[@]}"; do
          SOURCE_FILE="${TARGET_ARRAY[i]}"
          DEST_FILE="${DEST_ARRAY[i]}"
          
          if [ -f "$SOURCE_FILE" ] && [ -f "$DEST_FILE" ]; then
            echo "--- Comparing $SOURCE_FILE and $DEST_FILE ---"
            diff -u "$SOURCE_FILE" "$DEST_FILE" | head -20 || echo "No differences or error in diff"
            echo "----------------------------------------"
          else
            echo "‚ö†Ô∏è Cannot compare: $SOURCE_FILE or $DEST_FILE not found"
          fi
        done

    - name: Commit and push changes
      run: |
        echo "=== Committing Changes ==="
        
        # Configure git
        git config --local user.name "github-actions[bot]"
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Check for changes
        if git diff --quiet && git diff --staged --quiet; then
          echo "‚úÖ No changes to commit"
          exit 0
        fi
        
        # Add all changes
        git add .
        
        # Create commit message based on trigger type
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          COMMIT_MSG="üîß Manual: Sync rules - ${{ github.event.inputs.target_files }}"
        else
          COMMIT_MSG="ü§ñ Auto: Sync rules update"
        fi
        
        # Commit and push
        git commit -m "$COMMIT_MSG"
        git push origin release
        echo "‚úÖ Changes committed and pushed to release branch"

    - name: Final summary
      run: |
        echo "=== Workflow Summary ==="
        echo "üéâ Workflow completed successfully!"
        echo "üìÖ Completed at: $(date)"
        echo "‚ö° Trigger: ${{ github.event_name }}"
        echo "üåø Branch: release"
        echo "‚úÖ All file transformations completed"
