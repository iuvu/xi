name: File Transformation and Copy

on:
  workflow_dispatch:
    inputs:
      target_files:
        description: '要处理的文件路径（多个文件用逗号分隔）'
        required: true
        default: 'Rules/list/Game/Sky.list,Rules/list/Game/SkyCN.list,Rules/list/Emby.list,Rules/list/live_television.list'
      search_chars:
        description: '要查找的字符（多个字符用逗号分隔，支持多组替换用分号分隔）'
        required: true
        default: 'DOMAIN,,DOMAIN-SUFFIX,,DOMAIN-KEYWORD,,IP-CIDR,,IP-CIDR6,'
      replace_chars:
        description: '替换的字符（与查找字符一一对应，多组替换用分号分隔）'
        required: true
        default: ' - DOMAIN,, - DOMAIN-SUFFIX,, - DOMAIN-KEYWORD,, - IP-CIDR,, - IP-CIDR6,'
      copy_destinations:
        description: '复制目标路径（多个路径用逗号分隔）'
        required: true
        default: 'Rules/yaml/Game/Sky.yaml,Rules/yaml/Game/SkyCN.yaml,Rules/yaml/Emby.yaml,Rules/yaml/live_television.yaml'
        
  # 自动触发：当指定目录下的文件被修改时
  push:
    paths:
      - 'Rules/list/**'

jobs:
  sync-rules:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Debug info
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "SHA: ${{ github.sha }}"
        
    - name: Process files
      env:
        TARGET_FILES: ${{ github.event.inputs.target_files || 'Rules/list/Game/Sky.list,Rules/list/Game/SkyCN.list,Rules/list/Emby.list,Rules/list/live_television.list' }}
        SEARCH_CHARS: ${{ github.event.inputs.search_chars || 'DOMAIN,,DOMAIN-SUFFIX,,DOMAIN-KEYWORD,,IP-CIDR,,IP-CIDR6,' }}
        REPLACE_CHARS: ${{ github.event.inputs.replace_chars || ' - DOMAIN,, - DOMAIN-SUFFIX,, - DOMAIN-KEYWORD,, - IP-CIDR,, - IP-CIDR6,' }}
        COPY_DESTINATIONS: ${{ github.event.inputs.copy_destinations || 'Rules/yaml/Game/Sky.yaml,Rules/yaml/Game/SkyCN.yaml,Rules/yaml/Emby.yaml,Rules/yaml/live_television.yaml' }}
      run: |
        echo "=== Starting file processing ==="
        echo "Target files: $TARGET_FILES"
        echo "Search chars: $SEARCH_CHARS"
        echo "Replace chars: $REPLACE_CHARS"
        echo "Copy destinations: $COPY_DESTINATIONS"
        
        # Convert comma-separated strings to arrays
        IFS=',' read -ra TARGET_ARRAY <<< "$TARGET_FILES"
        IFS=',' read -ra SEARCH_ARRAY <<< "$SEARCH_CHARS"
        IFS=',' read -ra REPLACE_ARRAY <<< "$REPLACE_CHARS"
        IFS=',' read -ra DEST_ARRAY <<< "$COPY_DESTINATIONS"
        
        # Validate arrays
        if [ ${#SEARCH_ARRAY[@]} -ne ${#REPLACE_ARRAY[@]} ]; then
          echo "❌ Error: Search and replace arrays have different lengths"
          exit 1
        fi
        
        if [ ${#TARGET_ARRAY[@]} -ne ${#DEST_ARRAY[@]} ]; then
          echo "❌ Error: Target and destination arrays have different lengths"
          exit 1
        fi
        
        # Process each file pair
        for i in "${!TARGET_ARRAY[@]}"; do
          SOURCE_FILE="${TARGET_ARRAY[i]}"
          DEST_FILE="${DEST_ARRAY[i]}"
          
          echo "--- Processing: $SOURCE_FILE -> $DEST_FILE ---"
          
          # Check if source exists
          if [ ! -f "$SOURCE_FILE" ]; then
            echo "⚠️  Warning: Source file '$SOURCE_FILE' not found, skipping"
            continue
          fi
          
          # Create destination directory
          mkdir -p "$(dirname "$DEST_FILE")"
          
          # Read source content
          CONTENT=$(cat "$SOURCE_FILE")
          echo "Original file size: ${#CONTENT} characters"
          
          # Apply replacements
          for j in "${!SEARCH_ARRAY[@]}"; do
            SEARCH="${SEARCH_ARRAY[j]}"
            REPLACE="${REPLACE_ARRAY[j]}"
            
            OLD_CONTENT="$CONTENT"
            CONTENT="${CONTENT//$SEARCH/$REPLACE}"
            
            CHANGES=$(($(echo "$OLD_CONTENT" | grep -o "$SEARCH" | wc -l) - $(echo "$CONTENT" | grep -o "$SEARCH" | wc -l)))
            echo "Replaced '$SEARCH' with '$REPLACE': $CHANGES changes"
          done
          
          # Write to destination
          echo "$CONTENT" > "$DEST_FILE"
          echo "✅ Saved to: $DEST_FILE"
        done
        
        echo "=== File processing completed ==="
        
    - name: Commit and push changes
      if: always()
      run: |
        echo "=== Checking for changes ==="
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        
        # Check if there are any changes
        if git diff --quiet && git diff --staged --quiet; then
          echo "✅ No changes to commit"
          exit 0
        fi
        
        echo "📝 Changes detected, committing..."
        
        # Add all changes
        git add .
        
        # Create commit message
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          COMMIT_MSG="🔧 Manual sync: ${{ github.event.inputs.target_files || 'Rules update' }}"
        else
          COMMIT_MSG="🤖 Auto sync: Rules update"
        fi
        
        # Commit and push
        git commit -m "$COMMIT_MSG"
        git push
        echo "✅ Changes committed and pushed"
        
    - name: Final summary
      if: always()
      run: |
        echo "=== Workflow Summary ==="
        echo "✅ Workflow completed successfully"
        echo "Event: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref }}"
        date
